# coding: utf-8

"""
    Orchestra API

    Code Version 1.0.7.15

    The version of the OpenAPI document: Prod
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from blue_time_python_sdk import schemas  # noqa: F401


class PaymentsMoney(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            amount = schemas.Float64Schema
        
            @staticmethod
            def currencyCode() -> typing.Type['PaymentsCurrencyCode']:
                return PaymentsCurrencyCode
            
            
            class iso4217CurrencyNumber(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'iso4217CurrencyNumber':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            amountInLargestUnits = schemas.Float64Schema
            
            
            class formattedAmount(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'formattedAmount':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "amount": amount,
                "currencyCode": currencyCode,
                "iso4217CurrencyNumber": iso4217CurrencyNumber,
                "amountInLargestUnits": amountInLargestUnits,
                "formattedAmount": formattedAmount,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currencyCode"]) -> 'PaymentsCurrencyCode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["iso4217CurrencyNumber"]) -> MetaOapg.properties.iso4217CurrencyNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amountInLargestUnits"]) -> MetaOapg.properties.amountInLargestUnits: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["formattedAmount"]) -> MetaOapg.properties.formattedAmount: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["amount", "currencyCode", "iso4217CurrencyNumber", "amountInLargestUnits", "formattedAmount", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currencyCode"]) -> typing.Union['PaymentsCurrencyCode', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["iso4217CurrencyNumber"]) -> typing.Union[MetaOapg.properties.iso4217CurrencyNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amountInLargestUnits"]) -> typing.Union[MetaOapg.properties.amountInLargestUnits, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["formattedAmount"]) -> typing.Union[MetaOapg.properties.formattedAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["amount", "currencyCode", "iso4217CurrencyNumber", "amountInLargestUnits", "formattedAmount", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        currencyCode: typing.Union['PaymentsCurrencyCode', schemas.Unset] = schemas.unset,
        iso4217CurrencyNumber: typing.Union[MetaOapg.properties.iso4217CurrencyNumber, None, str, schemas.Unset] = schemas.unset,
        amountInLargestUnits: typing.Union[MetaOapg.properties.amountInLargestUnits, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        formattedAmount: typing.Union[MetaOapg.properties.formattedAmount, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PaymentsMoney':
        return super().__new__(
            cls,
            *args,
            amount=amount,
            currencyCode=currencyCode,
            iso4217CurrencyNumber=iso4217CurrencyNumber,
            amountInLargestUnits=amountInLargestUnits,
            formattedAmount=formattedAmount,
            _configuration=_configuration,
            **kwargs,
        )

from blue_time_python_sdk.model.payments_currency_code import PaymentsCurrencyCode
