# coding: utf-8

"""
    Orchestra API

    Code Version 1.0.7.15

    The version of the OpenAPI document: Prod
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from blue_time_python_sdk import schemas  # noqa: F401


class PayToolsDalEntitiesThreeDsMerchant(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "merchantDisplayName",
            "merchantRequestorIdSuffix",
            "merchantCountry",
            "acquirerName",
            "merchantUrl",
            "merchantName",
        }
        
        class properties:
            
            
            class merchantName(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 1
            
            
            class merchantDisplayName(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 1
            
            
            class merchantRequestorIdSuffix(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 1
            
            
            class merchantCountry(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 1
            
            
            class merchantUrl(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'uri'
                    min_length = 1
            
            
            class acquirerName(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 1
            
            
            class brands(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PayToolsDalEntitiesThreeDsBrand']:
                        return PayToolsDalEntitiesThreeDsBrand
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'brands':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "merchantName": merchantName,
                "merchantDisplayName": merchantDisplayName,
                "merchantRequestorIdSuffix": merchantRequestorIdSuffix,
                "merchantCountry": merchantCountry,
                "merchantUrl": merchantUrl,
                "acquirerName": acquirerName,
                "brands": brands,
            }
    
    merchantDisplayName: MetaOapg.properties.merchantDisplayName
    merchantRequestorIdSuffix: MetaOapg.properties.merchantRequestorIdSuffix
    merchantCountry: MetaOapg.properties.merchantCountry
    acquirerName: MetaOapg.properties.acquirerName
    merchantUrl: MetaOapg.properties.merchantUrl
    merchantName: MetaOapg.properties.merchantName
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merchantName"]) -> MetaOapg.properties.merchantName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merchantDisplayName"]) -> MetaOapg.properties.merchantDisplayName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merchantRequestorIdSuffix"]) -> MetaOapg.properties.merchantRequestorIdSuffix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merchantCountry"]) -> MetaOapg.properties.merchantCountry: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merchantUrl"]) -> MetaOapg.properties.merchantUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["acquirerName"]) -> MetaOapg.properties.acquirerName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["brands"]) -> MetaOapg.properties.brands: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["merchantName", "merchantDisplayName", "merchantRequestorIdSuffix", "merchantCountry", "merchantUrl", "acquirerName", "brands", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merchantName"]) -> MetaOapg.properties.merchantName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merchantDisplayName"]) -> MetaOapg.properties.merchantDisplayName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merchantRequestorIdSuffix"]) -> MetaOapg.properties.merchantRequestorIdSuffix: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merchantCountry"]) -> MetaOapg.properties.merchantCountry: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merchantUrl"]) -> MetaOapg.properties.merchantUrl: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["acquirerName"]) -> MetaOapg.properties.acquirerName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["brands"]) -> typing.Union[MetaOapg.properties.brands, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["merchantName", "merchantDisplayName", "merchantRequestorIdSuffix", "merchantCountry", "merchantUrl", "acquirerName", "brands", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        merchantDisplayName: typing.Union[MetaOapg.properties.merchantDisplayName, str, ],
        merchantRequestorIdSuffix: typing.Union[MetaOapg.properties.merchantRequestorIdSuffix, str, ],
        merchantCountry: typing.Union[MetaOapg.properties.merchantCountry, str, ],
        acquirerName: typing.Union[MetaOapg.properties.acquirerName, str, ],
        merchantUrl: typing.Union[MetaOapg.properties.merchantUrl, str, ],
        merchantName: typing.Union[MetaOapg.properties.merchantName, str, ],
        brands: typing.Union[MetaOapg.properties.brands, list, tuple, None, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PayToolsDalEntitiesThreeDsMerchant':
        return super().__new__(
            cls,
            *args,
            merchantDisplayName=merchantDisplayName,
            merchantRequestorIdSuffix=merchantRequestorIdSuffix,
            merchantCountry=merchantCountry,
            acquirerName=acquirerName,
            merchantUrl=merchantUrl,
            merchantName=merchantName,
            brands=brands,
            _configuration=_configuration,
            **kwargs,
        )

from blue_time_python_sdk.model.pay_tools_dal_entities_three_ds_brand import PayToolsDalEntitiesThreeDsBrand
