# coding: utf-8

"""
    Orchestra API

    Code Version 1.0.7.15

    The version of the OpenAPI document: Prod
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from blue_time_python_sdk import schemas  # noqa: F401


class PayToolsSharedModelsCardStoredCard(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Base model for card with Card holder name and Card Type
    """


    class MetaOapg:
        required = {
            "expirationYear",
            "cardHolderName",
            "expirationMonth",
            "cardToken",
        }
        
        class properties:
            
            
            class cardToken(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 1
                    regex=[{
                        'pattern': r'^@[A-Za-z0-9]{32}$',
                    }]
            
            
            class expirationYear(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 2050
                    inclusive_minimum = 2023
            
            
            class expirationMonth(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 12
                    inclusive_minimum = 1
            
            
            class cardHolderName(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 30
                    min_length = 3
        
            @staticmethod
            def cardType() -> typing.Type['PaymentsCardTypes']:
                return PaymentsCardTypes
            __annotations__ = {
                "cardToken": cardToken,
                "expirationYear": expirationYear,
                "expirationMonth": expirationMonth,
                "cardHolderName": cardHolderName,
                "cardType": cardType,
            }
    
    expirationYear: MetaOapg.properties.expirationYear
    cardHolderName: MetaOapg.properties.cardHolderName
    expirationMonth: MetaOapg.properties.expirationMonth
    cardToken: MetaOapg.properties.cardToken
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cardToken"]) -> MetaOapg.properties.cardToken: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expirationYear"]) -> MetaOapg.properties.expirationYear: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expirationMonth"]) -> MetaOapg.properties.expirationMonth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cardHolderName"]) -> MetaOapg.properties.cardHolderName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cardType"]) -> 'PaymentsCardTypes': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["cardToken", "expirationYear", "expirationMonth", "cardHolderName", "cardType", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cardToken"]) -> MetaOapg.properties.cardToken: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expirationYear"]) -> MetaOapg.properties.expirationYear: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expirationMonth"]) -> MetaOapg.properties.expirationMonth: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cardHolderName"]) -> MetaOapg.properties.cardHolderName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cardType"]) -> typing.Union['PaymentsCardTypes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cardToken", "expirationYear", "expirationMonth", "cardHolderName", "cardType", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        expirationYear: typing.Union[MetaOapg.properties.expirationYear, decimal.Decimal, int, ],
        cardHolderName: typing.Union[MetaOapg.properties.cardHolderName, str, ],
        expirationMonth: typing.Union[MetaOapg.properties.expirationMonth, decimal.Decimal, int, ],
        cardToken: typing.Union[MetaOapg.properties.cardToken, str, ],
        cardType: typing.Union['PaymentsCardTypes', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PayToolsSharedModelsCardStoredCard':
        return super().__new__(
            cls,
            *args,
            expirationYear=expirationYear,
            cardHolderName=cardHolderName,
            expirationMonth=expirationMonth,
            cardToken=cardToken,
            cardType=cardType,
            _configuration=_configuration,
            **kwargs,
        )

from blue_time_python_sdk.model.payments_card_types import PaymentsCardTypes
