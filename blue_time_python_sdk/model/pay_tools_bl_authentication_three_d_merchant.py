# coding: utf-8

"""
    Orchestra API

    Code Version 1.0.7.15

    The version of the OpenAPI document: Prod
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from blue_time_python_sdk import schemas  # noqa: F401


class PayToolsBlAuthenticationThreeDMerchant(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The 3DS Merchant data to be signed
    """


    class MetaOapg:
        required = {
            "brds",
            "msf",
            "cnt",
            "mds",
            "mnm",
            "url",
        }
        
        class properties:
            
            
            class mnm(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 1
            
            
            class mds(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 1
            
            
            class msf(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 1
            
            
            class cnt(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 1
            
            
            class url(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'uri'
                    min_length = 1
            
            
            class brds(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PayToolsBlAuthenticationThreeDsBrand']:
                        return PayToolsBlAuthenticationThreeDsBrand
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['PayToolsBlAuthenticationThreeDsBrand'], typing.List['PayToolsBlAuthenticationThreeDsBrand']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'brds':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PayToolsBlAuthenticationThreeDsBrand':
                    return super().__getitem__(i)
            __annotations__ = {
                "mnm": mnm,
                "mds": mds,
                "msf": msf,
                "cnt": cnt,
                "url": url,
                "brds": brds,
            }
    
    brds: MetaOapg.properties.brds
    msf: MetaOapg.properties.msf
    cnt: MetaOapg.properties.cnt
    mds: MetaOapg.properties.mds
    mnm: MetaOapg.properties.mnm
    url: MetaOapg.properties.url
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mnm"]) -> MetaOapg.properties.mnm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mds"]) -> MetaOapg.properties.mds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["msf"]) -> MetaOapg.properties.msf: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cnt"]) -> MetaOapg.properties.cnt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["brds"]) -> MetaOapg.properties.brds: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["mnm", "mds", "msf", "cnt", "url", "brds", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mnm"]) -> MetaOapg.properties.mnm: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mds"]) -> MetaOapg.properties.mds: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["msf"]) -> MetaOapg.properties.msf: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cnt"]) -> MetaOapg.properties.cnt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["brds"]) -> MetaOapg.properties.brds: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["mnm", "mds", "msf", "cnt", "url", "brds", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        brds: typing.Union[MetaOapg.properties.brds, list, tuple, ],
        msf: typing.Union[MetaOapg.properties.msf, str, ],
        cnt: typing.Union[MetaOapg.properties.cnt, str, ],
        mds: typing.Union[MetaOapg.properties.mds, str, ],
        mnm: typing.Union[MetaOapg.properties.mnm, str, ],
        url: typing.Union[MetaOapg.properties.url, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PayToolsBlAuthenticationThreeDMerchant':
        return super().__new__(
            cls,
            *args,
            brds=brds,
            msf=msf,
            cnt=cnt,
            mds=mds,
            mnm=mnm,
            url=url,
            _configuration=_configuration,
            **kwargs,
        )

from blue_time_python_sdk.model.pay_tools_bl_authentication_three_ds_brand import PayToolsBlAuthenticationThreeDsBrand
