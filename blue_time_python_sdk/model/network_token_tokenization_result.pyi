# coding: utf-8

"""
    Orchestra API

    Code Version 1.0.7.15

    The version of the OpenAPI document: Prod
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from blue_time_python_sdk import schemas  # noqa: F401


class NetworkTokenTokenizationResult(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def resultCode() -> typing.Type['NetworkTokenTokenizationResultCode']:
                return NetworkTokenTokenizationResultCode
        
            @staticmethod
            def brand() -> typing.Type['PaymentsNetworkTokenSchemes']:
                return PaymentsNetworkTokenSchemes
            
            
            class tokenId(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tokenId':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def tokenizedCard() -> typing.Type['PaymentsBankCardBase']:
                return PaymentsBankCardBase
            __annotations__ = {
                "resultCode": resultCode,
                "brand": brand,
                "tokenId": tokenId,
                "tokenizedCard": tokenizedCard,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resultCode"]) -> 'NetworkTokenTokenizationResultCode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["brand"]) -> 'PaymentsNetworkTokenSchemes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tokenId"]) -> MetaOapg.properties.tokenId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tokenizedCard"]) -> 'PaymentsBankCardBase': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["resultCode", "brand", "tokenId", "tokenizedCard", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resultCode"]) -> typing.Union['NetworkTokenTokenizationResultCode', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["brand"]) -> typing.Union['PaymentsNetworkTokenSchemes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tokenId"]) -> typing.Union[MetaOapg.properties.tokenId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tokenizedCard"]) -> typing.Union['PaymentsBankCardBase', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["resultCode", "brand", "tokenId", "tokenizedCard", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        resultCode: typing.Union['NetworkTokenTokenizationResultCode', schemas.Unset] = schemas.unset,
        brand: typing.Union['PaymentsNetworkTokenSchemes', schemas.Unset] = schemas.unset,
        tokenId: typing.Union[MetaOapg.properties.tokenId, None, str, schemas.Unset] = schemas.unset,
        tokenizedCard: typing.Union['PaymentsBankCardBase', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'NetworkTokenTokenizationResult':
        return super().__new__(
            cls,
            *args,
            resultCode=resultCode,
            brand=brand,
            tokenId=tokenId,
            tokenizedCard=tokenizedCard,
            _configuration=_configuration,
            **kwargs,
        )

from blue_time_python_sdk.model.network_token_tokenization_result_code import NetworkTokenTokenizationResultCode
from blue_time_python_sdk.model.payments_bank_card_base import PaymentsBankCardBase
from blue_time_python_sdk.model.payments_network_token_schemes import PaymentsNetworkTokenSchemes
