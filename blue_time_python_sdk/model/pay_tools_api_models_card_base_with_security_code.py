# coding: utf-8

"""
    Orchestra API

    Code Version 1.0.7.15

    The version of the OpenAPI document: Prod
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from blue_time_python_sdk import schemas  # noqa: F401


class PayToolsApiModelsCardBaseWithSecurityCode(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Base model for card with Security code
    """


    class MetaOapg:
        required = {
            "expirationYear",
            "expirationMonth",
            "cardNumber",
        }
        
        class properties:
            
            
            class cardNumber(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 1
                    regex=[{
                        'pattern': r'^(\d{12,20}|@[A-Za-z0-9]{32})$',
                    }]
            expirationYear = schemas.Int32Schema
            
            
            class expirationMonth(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 12
                    inclusive_minimum = 1
            
            
            class cvv(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^\d{3,4}$',
                    }]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'cvv':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "cardNumber": cardNumber,
                "expirationYear": expirationYear,
                "expirationMonth": expirationMonth,
                "cvv": cvv,
            }
    
    expirationYear: MetaOapg.properties.expirationYear
    expirationMonth: MetaOapg.properties.expirationMonth
    cardNumber: MetaOapg.properties.cardNumber
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cardNumber"]) -> MetaOapg.properties.cardNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expirationYear"]) -> MetaOapg.properties.expirationYear: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expirationMonth"]) -> MetaOapg.properties.expirationMonth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cvv"]) -> MetaOapg.properties.cvv: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["cardNumber", "expirationYear", "expirationMonth", "cvv", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cardNumber"]) -> MetaOapg.properties.cardNumber: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expirationYear"]) -> MetaOapg.properties.expirationYear: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expirationMonth"]) -> MetaOapg.properties.expirationMonth: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cvv"]) -> typing.Union[MetaOapg.properties.cvv, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cardNumber", "expirationYear", "expirationMonth", "cvv", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        expirationYear: typing.Union[MetaOapg.properties.expirationYear, decimal.Decimal, int, ],
        expirationMonth: typing.Union[MetaOapg.properties.expirationMonth, decimal.Decimal, int, ],
        cardNumber: typing.Union[MetaOapg.properties.cardNumber, str, ],
        cvv: typing.Union[MetaOapg.properties.cvv, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PayToolsApiModelsCardBaseWithSecurityCode':
        return super().__new__(
            cls,
            *args,
            expirationYear=expirationYear,
            expirationMonth=expirationMonth,
            cardNumber=cardNumber,
            cvv=cvv,
            _configuration=_configuration,
            **kwargs,
        )
