# coding: utf-8

"""
    Orchestra API

    Code Version 1.0.7.15

    The version of the OpenAPI document: Prod
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from blue_time_python_sdk import schemas  # noqa: F401


class PaymentsOperationResult(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class authorizationCode(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'authorizationCode':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def operationType() -> typing.Type['PaymentsOperation']:
                return PaymentsOperation
        
            @staticmethod
            def currency() -> typing.Type['PaymentsCurrencyCode']:
                return PaymentsCurrencyCode
            amount = schemas.Float64Schema
        
            @staticmethod
            def operationResultCode() -> typing.Type['PaymentsResult']:
                return PaymentsResult
            
            
            class operationResultDescription(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'operationResultDescription':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            customGatewayResponse = schemas.AnyTypeSchema
            
            
            class gatewayName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'gatewayName':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class gatewayReference(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'gatewayReference':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class gatewayResultCode(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'gatewayResultCode':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class gatewayResultDescription(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'gatewayResultDescription':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class gatewayResultSubCode(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'gatewayResultSubCode':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class gatewayResultSubDescription(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'gatewayResultSubDescription':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            gatewayToken = schemas.AnyTypeSchema
            __annotations__ = {
                "authorizationCode": authorizationCode,
                "operationType": operationType,
                "currency": currency,
                "amount": amount,
                "operationResultCode": operationResultCode,
                "operationResultDescription": operationResultDescription,
                "customGatewayResponse": customGatewayResponse,
                "gatewayName": gatewayName,
                "gatewayReference": gatewayReference,
                "gatewayResultCode": gatewayResultCode,
                "gatewayResultDescription": gatewayResultDescription,
                "gatewayResultSubCode": gatewayResultSubCode,
                "gatewayResultSubDescription": gatewayResultSubDescription,
                "gatewayToken": gatewayToken,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authorizationCode"]) -> MetaOapg.properties.authorizationCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["operationType"]) -> 'PaymentsOperation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> 'PaymentsCurrencyCode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["operationResultCode"]) -> 'PaymentsResult': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["operationResultDescription"]) -> MetaOapg.properties.operationResultDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customGatewayResponse"]) -> MetaOapg.properties.customGatewayResponse: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gatewayName"]) -> MetaOapg.properties.gatewayName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gatewayReference"]) -> MetaOapg.properties.gatewayReference: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gatewayResultCode"]) -> MetaOapg.properties.gatewayResultCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gatewayResultDescription"]) -> MetaOapg.properties.gatewayResultDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gatewayResultSubCode"]) -> MetaOapg.properties.gatewayResultSubCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gatewayResultSubDescription"]) -> MetaOapg.properties.gatewayResultSubDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gatewayToken"]) -> MetaOapg.properties.gatewayToken: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["authorizationCode", "operationType", "currency", "amount", "operationResultCode", "operationResultDescription", "customGatewayResponse", "gatewayName", "gatewayReference", "gatewayResultCode", "gatewayResultDescription", "gatewayResultSubCode", "gatewayResultSubDescription", "gatewayToken", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authorizationCode"]) -> typing.Union[MetaOapg.properties.authorizationCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["operationType"]) -> typing.Union['PaymentsOperation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> typing.Union['PaymentsCurrencyCode', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["operationResultCode"]) -> typing.Union['PaymentsResult', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["operationResultDescription"]) -> typing.Union[MetaOapg.properties.operationResultDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customGatewayResponse"]) -> typing.Union[MetaOapg.properties.customGatewayResponse, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gatewayName"]) -> typing.Union[MetaOapg.properties.gatewayName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gatewayReference"]) -> typing.Union[MetaOapg.properties.gatewayReference, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gatewayResultCode"]) -> typing.Union[MetaOapg.properties.gatewayResultCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gatewayResultDescription"]) -> typing.Union[MetaOapg.properties.gatewayResultDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gatewayResultSubCode"]) -> typing.Union[MetaOapg.properties.gatewayResultSubCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gatewayResultSubDescription"]) -> typing.Union[MetaOapg.properties.gatewayResultSubDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gatewayToken"]) -> typing.Union[MetaOapg.properties.gatewayToken, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["authorizationCode", "operationType", "currency", "amount", "operationResultCode", "operationResultDescription", "customGatewayResponse", "gatewayName", "gatewayReference", "gatewayResultCode", "gatewayResultDescription", "gatewayResultSubCode", "gatewayResultSubDescription", "gatewayToken", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        authorizationCode: typing.Union[MetaOapg.properties.authorizationCode, None, str, schemas.Unset] = schemas.unset,
        operationType: typing.Union['PaymentsOperation', schemas.Unset] = schemas.unset,
        currency: typing.Union['PaymentsCurrencyCode', schemas.Unset] = schemas.unset,
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        operationResultCode: typing.Union['PaymentsResult', schemas.Unset] = schemas.unset,
        operationResultDescription: typing.Union[MetaOapg.properties.operationResultDescription, None, str, schemas.Unset] = schemas.unset,
        customGatewayResponse: typing.Union[MetaOapg.properties.customGatewayResponse, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        gatewayName: typing.Union[MetaOapg.properties.gatewayName, None, str, schemas.Unset] = schemas.unset,
        gatewayReference: typing.Union[MetaOapg.properties.gatewayReference, None, str, schemas.Unset] = schemas.unset,
        gatewayResultCode: typing.Union[MetaOapg.properties.gatewayResultCode, None, str, schemas.Unset] = schemas.unset,
        gatewayResultDescription: typing.Union[MetaOapg.properties.gatewayResultDescription, None, str, schemas.Unset] = schemas.unset,
        gatewayResultSubCode: typing.Union[MetaOapg.properties.gatewayResultSubCode, None, str, schemas.Unset] = schemas.unset,
        gatewayResultSubDescription: typing.Union[MetaOapg.properties.gatewayResultSubDescription, None, str, schemas.Unset] = schemas.unset,
        gatewayToken: typing.Union[MetaOapg.properties.gatewayToken, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PaymentsOperationResult':
        return super().__new__(
            cls,
            *args,
            authorizationCode=authorizationCode,
            operationType=operationType,
            currency=currency,
            amount=amount,
            operationResultCode=operationResultCode,
            operationResultDescription=operationResultDescription,
            customGatewayResponse=customGatewayResponse,
            gatewayName=gatewayName,
            gatewayReference=gatewayReference,
            gatewayResultCode=gatewayResultCode,
            gatewayResultDescription=gatewayResultDescription,
            gatewayResultSubCode=gatewayResultSubCode,
            gatewayResultSubDescription=gatewayResultSubDescription,
            gatewayToken=gatewayToken,
            _configuration=_configuration,
            **kwargs,
        )

from blue_time_python_sdk.model.payments_currency_code import PaymentsCurrencyCode
from blue_time_python_sdk.model.payments_operation import PaymentsOperation
from blue_time_python_sdk.model.payments_result import PaymentsResult
