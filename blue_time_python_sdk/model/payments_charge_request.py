# coding: utf-8

"""
    Orchestra API

    Code Version 1.0.7.15

    The version of the OpenAPI document: Prod
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from blue_time_python_sdk import schemas  # noqa: F401


class PaymentsChargeRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def bankCard() -> typing.Type['PaymentsBankCard']:
                return PaymentsBankCard
        
            @staticmethod
            def payer() -> typing.Type['PaymentsPayer']:
                return PaymentsPayer
        
            @staticmethod
            def threeDS() -> typing.Type['PaymentsThreeDS']:
                return PaymentsThreeDS
            
            
            class userToken(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'userToken':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def amount() -> typing.Type['PaymentsMoney']:
                return PaymentsMoney
            
            
            class myReference(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'myReference':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            isDigitalGoods = schemas.BoolSchema
            
            
            class orderDesc(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'orderDesc':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            generateToken = schemas.BoolSchema
            __annotations__ = {
                "bankCard": bankCard,
                "payer": payer,
                "threeDS": threeDS,
                "userToken": userToken,
                "amount": amount,
                "myReference": myReference,
                "isDigitalGoods": isDigitalGoods,
                "orderDesc": orderDesc,
                "generateToken": generateToken,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bankCard"]) -> 'PaymentsBankCard': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payer"]) -> 'PaymentsPayer': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["threeDS"]) -> 'PaymentsThreeDS': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userToken"]) -> MetaOapg.properties.userToken: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> 'PaymentsMoney': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["myReference"]) -> MetaOapg.properties.myReference: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isDigitalGoods"]) -> MetaOapg.properties.isDigitalGoods: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orderDesc"]) -> MetaOapg.properties.orderDesc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["generateToken"]) -> MetaOapg.properties.generateToken: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["bankCard", "payer", "threeDS", "userToken", "amount", "myReference", "isDigitalGoods", "orderDesc", "generateToken", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bankCard"]) -> typing.Union['PaymentsBankCard', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payer"]) -> typing.Union['PaymentsPayer', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["threeDS"]) -> typing.Union['PaymentsThreeDS', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userToken"]) -> typing.Union[MetaOapg.properties.userToken, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union['PaymentsMoney', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["myReference"]) -> typing.Union[MetaOapg.properties.myReference, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isDigitalGoods"]) -> typing.Union[MetaOapg.properties.isDigitalGoods, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orderDesc"]) -> typing.Union[MetaOapg.properties.orderDesc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["generateToken"]) -> typing.Union[MetaOapg.properties.generateToken, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["bankCard", "payer", "threeDS", "userToken", "amount", "myReference", "isDigitalGoods", "orderDesc", "generateToken", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        bankCard: typing.Union['PaymentsBankCard', schemas.Unset] = schemas.unset,
        payer: typing.Union['PaymentsPayer', schemas.Unset] = schemas.unset,
        threeDS: typing.Union['PaymentsThreeDS', schemas.Unset] = schemas.unset,
        userToken: typing.Union[MetaOapg.properties.userToken, None, str, schemas.Unset] = schemas.unset,
        amount: typing.Union['PaymentsMoney', schemas.Unset] = schemas.unset,
        myReference: typing.Union[MetaOapg.properties.myReference, None, str, schemas.Unset] = schemas.unset,
        isDigitalGoods: typing.Union[MetaOapg.properties.isDigitalGoods, bool, schemas.Unset] = schemas.unset,
        orderDesc: typing.Union[MetaOapg.properties.orderDesc, None, str, schemas.Unset] = schemas.unset,
        generateToken: typing.Union[MetaOapg.properties.generateToken, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PaymentsChargeRequest':
        return super().__new__(
            cls,
            *args,
            bankCard=bankCard,
            payer=payer,
            threeDS=threeDS,
            userToken=userToken,
            amount=amount,
            myReference=myReference,
            isDigitalGoods=isDigitalGoods,
            orderDesc=orderDesc,
            generateToken=generateToken,
            _configuration=_configuration,
            **kwargs,
        )

from blue_time_python_sdk.model.payments_bank_card import PaymentsBankCard
from blue_time_python_sdk.model.payments_money import PaymentsMoney
from blue_time_python_sdk.model.payments_payer import PaymentsPayer
from blue_time_python_sdk.model.payments_three_ds import PaymentsThreeDS
