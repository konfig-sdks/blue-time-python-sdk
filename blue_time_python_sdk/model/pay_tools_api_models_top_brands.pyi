# coding: utf-8

"""
    Orchestra API

    Code Version 1.0.7.15

    The version of the OpenAPI document: Prod
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from blue_time_python_sdk import schemas  # noqa: F401


class PayToolsApiModelsTopBrands(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    List of to brands and logos
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def prefixes() -> typing.Type['PayToolsApiModelsTopBrandsPrefixes']:
                return PayToolsApiModelsTopBrandsPrefixes
        
            @staticmethod
            def logos() -> typing.Type['PayToolsApiModelsTopBrandsLogos']:
                return PayToolsApiModelsTopBrandsLogos
            __annotations__ = {
                "prefixes": prefixes,
                "logos": logos,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prefixes"]) -> 'PayToolsApiModelsTopBrandsPrefixes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["logos"]) -> 'PayToolsApiModelsTopBrandsLogos': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["prefixes", "logos", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prefixes"]) -> typing.Union['PayToolsApiModelsTopBrandsPrefixes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["logos"]) -> typing.Union['PayToolsApiModelsTopBrandsLogos', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["prefixes", "logos", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        prefixes: typing.Union['PayToolsApiModelsTopBrandsPrefixes', schemas.Unset] = schemas.unset,
        logos: typing.Union['PayToolsApiModelsTopBrandsLogos', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PayToolsApiModelsTopBrands':
        return super().__new__(
            cls,
            *args,
            prefixes=prefixes,
            logos=logos,
            _configuration=_configuration,
            **kwargs,
        )

from blue_time_python_sdk.model.pay_tools_api_models_top_brands_logos import PayToolsApiModelsTopBrandsLogos
from blue_time_python_sdk.model.pay_tools_api_models_top_brands_prefixes import PayToolsApiModelsTopBrandsPrefixes
